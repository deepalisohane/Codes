Segment tree


class NumArray {
public:
    vector<int> seg;
    int n;

    void build(int st, int end, int root, vector<int>& nums){
        if(st==end){
            seg[root]=nums[st];
            return;
        }

        int mid=st+(end-st)/2;
        build(st, mid, root*2, nums);
        build(mid+1, end, root*2+1, nums);
        seg[root]=seg[root*2]+seg[root*2+1];
    }

    NumArray(vector<int>& nums) {
        n=nums.size();
        seg.resize(n*4+1, 0);
        build(0, n-1, 1, nums);
        for(int i=0;i<n;i++) cout<<seg[i]<<" ";
    }

    void update(int ind, int val, int st, int end, int root){
        if(ind<st || end<ind) return;
        if(st==end) {
            if(st == ind)
                seg[root]=val;
            return;
        }
        int mid=st+(end-st)/2;
        solve(ind, val, st, mid, root*2);
        solve(ind, val, mid+1, end, root*2+1);
        seg[root]=seg[root*2]+seg[root*2+1];
    }


    int query(int st, int end, int l, int r, int root){
        if(end<l || r<st) return 0;
        if(l<=st && end<=r) return seg[root];
        int mid=(st+end)/2;
        int left=getval(st, mid, l, r, root*2);
        int right=getval(mid+1, end, l, r, root*2+1);
        return left+right;
    }
};



Lazy prapogation


#include<bits/stdc++.h>
using namespace std; 
class ST {
	vector<int> seg, lazy; 
public: 
	ST(int n) {
		seg.resize(4 * n); 
		lazy.resize(4 * n); 
	}
public: 
	void build(int ind, int low, int high, int arr[]) {
		if(low == high) {
			seg[ind] = arr[low];
			return; 
		}
		int mid = (low + high) >> 1; 
		build(2*ind+1, low, mid, arr); 
		build(2*ind+2, mid+1, high, arr); 
		seg[ind] = seg[2*ind+1] + seg[2*ind+2];
	}
public:
	void update(int ind, int low, int high, int l, int r, 
		int val) {
		// update the previous remaining updates 
		// and propogate downwards 
		if(lazy[ind] != 0) {
			seg[ind] += (high - low + 1) * lazy[ind]; 
			// propogate the lazy update downwards
			// for the remaining nodes to get updated 
			if(low != high) {
				lazy[2*ind+1] += lazy[ind]; 
				lazy[2*ind+2] += lazy[ind]; 
			}
 
			lazy[ind] = 0; 
		}
 
		// no overlap 
		// we don't do anything and return 
		// low high l r or l r low high 
		if(high < l or r < low) {
			return; 
		}
 
		// complete overlap 
		// l low high r 
		if(low>=l && high <= r) {
			seg[ind] += (high - low + 1) * val; 
			// if a leaf node, it will have childrens
			if(low != high) {
				lazy[2*ind+1] += val; 
				lazy[2*ind+2] += val; 
			}
			return; 
		}
		// last case has to be no overlap case
		int mid = (low + high) >> 1; 
		update(2*ind+1, low, mid, l, r, val);
		update(2*ind+2, mid+1, high, l, r, val); 
		seg[ind] = seg[2*ind+1] + seg[2*ind+2]; 
	}
public: 
	int query(int ind, int low, int high, int l, int r) {
 
		// update if any updates are remaining 
		// as the node will stay fresh and updated 
		if(lazy[ind] != 0) {
			seg[ind] += (high - low + 1) * lazy[ind]; 
			// propogate the lazy update downwards
			// for the remaining nodes to get updated 
			if(low != high) {
				lazy[2*ind+1] += lazy[ind]; 
				lazy[2*ind+2] += lazy[ind]; 
			}
 
			lazy[ind] = 0; 
		}
 
		// no overlap return 0; 
		if(high < l or r < low) {
			return 0; 
		}
 
		// complete overlap 
		if(low>=l && high <= r) return seg[ind]; 
 
		int mid = (low + high) >> 1; 
		int left = query(2*ind+1, low, mid, l, r);
		int right = query(2*ind+2, mid+1, high, l, r);
		return left + right; 
	}
};
 
